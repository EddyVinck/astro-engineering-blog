---
import { getEntryBySlug, getCollection } from "astro:content";

export interface Props {
  authorId: string;
  showPosts?: boolean;
  headingLevel: 1 | 2 | 3 | 4 | 5 | 6;
}

const { authorId, showPosts, headingLevel = 2 } = Astro.props;
const H = `h${headingLevel}`;

const entry = await getEntryBySlug("author", authorId);
if (!entry) {
  throw new Error(`Author with id ${authorId} not found`);
}

const { Content } = await entry.render();
const { firstname, lastname, avatar, github, linkedin, twitter } = entry.data;
const socials = [
  { name: "Github", url: github },
  { name: "LinkedIn", url: linkedin },
  { name: "Twitter", url: twitter },
].filter((social) => social.url);

const posts = await getCollection("blog");
const authorPosts = posts
  .filter((post) => post.data.draft === false)
  .filter((post) => post.data.authors.includes(authorId))
  .map((post) => ({
    url: `/blog/${post.slug}`,
    data: post.data,
  }));
---

<div class="author">
  <H>{firstname}&nbsp;{lastname}</H>
  <img src={avatar} alt={`${firstname} ${lastname}`} />
  <div><Content /></div>

  {
    showPosts && authorPosts.length > 0 && (
      <>
        <p>My posts ({authorPosts.length})</p>
        <ul>
          {authorPosts.map((post) => (
            <li>
              <a href={post.url}>{post.data.title}</a>
            </li>
          ))}
        </ul>
      </>
    )
  }

  {
    socials.length > 0 && (
      <>
        <p>My links</p>
        <ul class="socials">
          {socials.map((social) => (
            <li>
              <a href={social.url}>{social.name}</a>
            </li>
          ))}
        </ul>
      </>
    )
  }
</div>

<style>
  .author {
    display: flex;
    flex-direction: column;
    align-items: start;
    padding: 1rem;
    border-radius: 1rem;
  }
  .author img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
  }
  .author .socials {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    gap: 1rem;
  }
  p {
    margin-bottom: 0;
  }
</style>
